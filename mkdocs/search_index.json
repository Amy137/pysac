{
    "docs": [
        {
            "location": "/index.html", 
            "text": "PySAC\n\n\nPython interface to the \nSeismic Analysis\nCode\n (SAC) file format.  \n\n\nFile-type support:\n\n\n\n\nlittle and big-endian binary format\n\n\nalphanumeric format\n\n\nevenly-sampled data\n\n\ntime-series, not spectra\n\n\n\n\nProject page\n\n\nRepository\n\n\nDocs PDF\n  \n\n\nGoals\n\n\n\n\nExpose the file format in a way that is intuitive to SAC users and to Python\n   programmers\n\n\nMaintaining header validity when converting between ObsPy Traces.\n\n\n\n\nFeatures\n\n\n\n\nRead and write SAC binary or ASCII\n\n\nautodetect or specify expected byteorder\n\n\noptional file size checking and/or header consistency checks\n\n\nheader-only reading and writing\n\n\n\"overwrite OK\" checking ('lovrok' header)\n\n\n\n\n\n\nConvenient access and manipulation of relative and absolute time headers\n\n\nUser-friendly header printing/viewing\n\n\nFast access to header values from attributes\n\n\nWith type checking, null handling, and enumerated value checking\n\n\n\n\n\n\nConvert to/from ObsPy Traces\n\n\nConversion from ObsPy Trace to SAC trace retains detected previous SAC header values.\n\n\nConversion to ObsPy Trace retains the \ncomplete\n SAC header.\n\n\n\n\n\n\n\n\nUsage examples\n\n\nRead/write SAC files\n\n\n# read from a binary file\nsac = SACTrace.read(filename)\n\n# read header only\nsac = SACTrace.read(filename, headonly=True)\n\n# write header-only, file must exist\nsac.write(filename, headonly=True)\n\n# read from an ASCII file\nsac = SACTrace.read(filename, ascii=True)\n\n# write a binary SAC file for a Sun machine\nsac.write(filename, byteorder='big')\n\n\n\n\nReference-time and relative time headers\n\n\nsac = SACTrace(nzyear=2000, nzjday=1, nzhour=0, nzmin=0, nzsec=0, nzmsec=0,\n               t1=23.5, data=numpy.arange(100))\n\nsac.reftime\nsac.b, sac.e, sac.t1\n\n\n\n\n2000-01-01T00:00:00.000000Z\n(0.0, 99.0, 23.5)\n\n\n\n\nMove reference time by relative seconds, relative time headers are preserved.\n\n\nsac.reftime -= 2.5\nsac.b, sac.e, sac.t1\n\n\n\n\n(2.5, 101.5, 26.0)\n\n\n\n\nSet reference time to new absolute time, relative time headers are preserved.\n\n\nsac.reftime = UTCDateTime(2000, 1, 1, 0, 2, 0, 0)\nsac.b, sac.e\n\n\n\n\n(-120.0, -21.0, -96.5)\n\n\n\n\nQuick header viewing\n\n\nPrint non-null header values.\n\n\nsac = SACTrace()\nprint sac\n\n\n\n\nReference Time = 01/01/2000 (001) 00:00:00.000000\n    iztype IB: begin time\nb          = 0.0\ncmpaz      = 0.0\ncmpinc     = 0.0\ndelta      = 1.0\ne          = 99.0\niftype     = itime\ninternal0  = 2.0\niztype     = ib\nkcmpnm     = Z\nlcalda     = False\nleven      = True\nlovrok     = True\nlpspol     = True\nnpts       = 100\nnvhdr      = 6\nnzhour     = 0\nnzjday     = 1\nnzmin      = 0\nnzmsec     = 0\nnzsec      = 0\nnzyear     = 2000\n\n\n\n\nPrint relative time header values.\n\n\nsac.lh('picks')\n\n\n\n\nReference Time = 01/01/1970 (001) 00:00:00.000000\n    iztype IB: begin time\n    a          = None\n    b          = 0.0\n    e          = 0.0\n    f          = None\n    o          = None\n    t0         = None\n    t1         = None\n    t2         = None\n    t3         = None\n    t4         = None\n    t5         = None\n    t6         = None\n    t7         = None\n    t8         = None\n    t9         = None\n\n\n\n\nHeader values as attributes\n\n\nGreat for interactive use, with (ipython) tab-completion...\n\n\nsac.\ntab\n\n\n\n\n\nsac.a                 sac.kevnm             sac.nzsec\nsac.az                sac.kf                sac.nzyear\nsac.b                 sac.khole             sac.o\nsac.baz               sac.kinst             sac.odelta\nsac.byteorder         sac.knetwk            sac.read\nsac.cmpaz             sac.ko                sac.reftime\nsac.cmpinc            sac.kstnm             sac.scale\nsac.copy              sac.kt0               sac.stdp\nsac.data              sac.kt1               sac.stel\nsac.delta             sac.kt2               sac.stla\nsac.depmax            sac.kt3               sac.stlo\nsac.depmen            sac.kt4               sac.t0\nsac.depmin            sac.kt5               sac.t1\nsac.dist              sac.kt6               sac.t2\nsac.e                 sac.kt7               sac.t3\nsac.evdp              sac.kt8               sac.t4\nsac.evla              sac.kt9               sac.t5\nsac.evlo              sac.kuser0            sac.t6\nsac.f                 sac.kuser1            sac.t7\nsac.from_obspy_trace  sac.kuser2            sac.t8\nsac.gcarc             sac.lcalda            sac.t9\nsac.idep              sac.leven             sac.to_obspy_trace\nsac.ievreg            sac.lh                sac.unused23\nsac.ievtyp            sac.listhdr           sac.user0\nsac.iftype            sac.lovrok            sac.user1\nsac.iinst             sac.lpspol            sac.user2\nsac.imagsrc           sac.mag               sac.user3\nsac.imagtyp           sac.nevid             sac.user4\nsac.internal0         sac.norid             sac.user5\nsac.iqual             sac.npts              sac.user6\nsac.istreg            sac.nvhdr             sac.user7\nsac.isynth            sac.nwfid             sac.user8\nsac.iztype            sac.nzhour            sac.user9\nsac.ka                sac.nzjday            sac.validate\nsac.kcmpnm            sac.nzmin             sac.write\nsac.kdatrd            sac.nzmsec\n\n\n\n\n...and documentation!\n\n\nsac.iztype?\n\n\n\n\nType:        property\nString form: \nproperty object at 0x106404940\n\nDocstring:\nI    Reference time equivalence:\n* IUNKN (5): Unknown\n* IB (9): Begin time\n* IDAY (10): Midnight of reference GMT day\n* IO (11): Event origin time\n* IA (12): First arrival time\n* ITn (13-22): User defined time pick n, n=0,9\n\n\n\n\nConvert to/from ObsPy Traces\n\n\nfrom obspy import read\ntr = read()[0]\nprint tr.stats\n\n\n\n\n         network: BW\n         station: RJOB\n        location: \n         channel: EHZ\n       starttime: 2009-08-24T00:20:03.000000Z\n         endtime: 2009-08-24T00:20:32.990000Z\n   sampling_rate: 100.0\n           delta: 0.01\n            npts: 3000\n           calib: 1.0\n    back_azimuth: 100.0\n     inclination: 30.0\n\n\n\n\nsac = SACTrace.from_obspy_trace(tr)\nprint sac\n\n\n\n\nReference Time = 08/24/2009 (236) 00:20:03.000000\n    iztype IB: begin time\nb          = 0.0\ncmpaz      = 0.0\ncmpinc     = 0.0\ndelta      = 0.00999999977648\ndepmax     = 1293.77099609\ndepmen     = -4.49556303024\ndepmin     = -1515.81311035\ne          = 29.9899993297\niftype     = itime\ninternal0  = 2.0\niztype     = ib\nkcmpnm     = EHZ\nknetwk     = BW\nkstnm      = RJOB\nlcalda     = False\nleven      = True\nlovrok     = True\nlpspol     = True\nnpts       = 3000\nnvhdr      = 6\nnzhour     = 0\nnzjday     = 236\nnzmin      = 20\nnzmsec     = 0\nnzsec      = 3\nnzyear     = 2009\nscale      = 1.0\n\n\n\n\ntr2 = sac.to_obspy_trace()\nprint tr2.stats\n\n\n\n\n         network: BW\n         station: RJOB\n        location:\n         channel: EHZ\n       starttime: 2009-08-24T00:20:03.000000Z\n         endtime: 2009-08-24T00:20:32.990000Z\n   sampling_rate: 100.0\n           delta: 0.01\n            npts: 3000\n           calib: 1.0\n             sac: AttribDict({'cmpaz': 0.0, 'nzyear': 2009, 'nzjday': 236,\n             'iztype': 9, 'evla': 0.0, 'nzhour': 0, 'lcalda': 0, 'evlo': 0.0,\n             'scale': 1.0, 'nvhdr': 6, 'depmin': -1515.8131, 'kcmpnm': 'EHZ',\n             'nzsec': 3, 'internal0': 2.0, 'depmen': -4.495563, 'cmpinc': 0.0,\n             'depmax': 1293.771, 'iftype': 1, 'delta': 0.0099999998, 'nzmsec':\n             0, 'lpspol': 1, 'b': 0.0, 'e': 29.99, 'leven': 1, 'kstnm': 'RJOB',\n             'nzmin': 20, 'lovrok': 1, 'npts': 3000, 'knetwk': 'BW'})", 
            "title": "Introduction"
        }, 
        {
            "location": "/index.html#pysac", 
            "text": "Python interface to the  Seismic Analysis\nCode  (SAC) file format.    File-type support:   little and big-endian binary format  alphanumeric format  evenly-sampled data  time-series, not spectra   Project page  Repository  Docs PDF", 
            "title": "PySAC"
        }, 
        {
            "location": "/index.html#goals", 
            "text": "Expose the file format in a way that is intuitive to SAC users and to Python\n   programmers  Maintaining header validity when converting between ObsPy Traces.", 
            "title": "Goals"
        }, 
        {
            "location": "/index.html#features", 
            "text": "Read and write SAC binary or ASCII  autodetect or specify expected byteorder  optional file size checking and/or header consistency checks  header-only reading and writing  \"overwrite OK\" checking ('lovrok' header)    Convenient access and manipulation of relative and absolute time headers  User-friendly header printing/viewing  Fast access to header values from attributes  With type checking, null handling, and enumerated value checking    Convert to/from ObsPy Traces  Conversion from ObsPy Trace to SAC trace retains detected previous SAC header values.  Conversion to ObsPy Trace retains the  complete  SAC header.", 
            "title": "Features"
        }, 
        {
            "location": "/index.html#usage-examples", 
            "text": "Read/write SAC files  # read from a binary file\nsac = SACTrace.read(filename)\n\n# read header only\nsac = SACTrace.read(filename, headonly=True)\n\n# write header-only, file must exist\nsac.write(filename, headonly=True)\n\n# read from an ASCII file\nsac = SACTrace.read(filename, ascii=True)\n\n# write a binary SAC file for a Sun machine\nsac.write(filename, byteorder='big')  Reference-time and relative time headers  sac = SACTrace(nzyear=2000, nzjday=1, nzhour=0, nzmin=0, nzsec=0, nzmsec=0,\n               t1=23.5, data=numpy.arange(100))\n\nsac.reftime\nsac.b, sac.e, sac.t1  2000-01-01T00:00:00.000000Z\n(0.0, 99.0, 23.5)  Move reference time by relative seconds, relative time headers are preserved.  sac.reftime -= 2.5\nsac.b, sac.e, sac.t1  (2.5, 101.5, 26.0)  Set reference time to new absolute time, relative time headers are preserved.  sac.reftime = UTCDateTime(2000, 1, 1, 0, 2, 0, 0)\nsac.b, sac.e  (-120.0, -21.0, -96.5)  Quick header viewing  Print non-null header values.  sac = SACTrace()\nprint sac  Reference Time = 01/01/2000 (001) 00:00:00.000000\n    iztype IB: begin time\nb          = 0.0\ncmpaz      = 0.0\ncmpinc     = 0.0\ndelta      = 1.0\ne          = 99.0\niftype     = itime\ninternal0  = 2.0\niztype     = ib\nkcmpnm     = Z\nlcalda     = False\nleven      = True\nlovrok     = True\nlpspol     = True\nnpts       = 100\nnvhdr      = 6\nnzhour     = 0\nnzjday     = 1\nnzmin      = 0\nnzmsec     = 0\nnzsec      = 0\nnzyear     = 2000  Print relative time header values.  sac.lh('picks')  Reference Time = 01/01/1970 (001) 00:00:00.000000\n    iztype IB: begin time\n    a          = None\n    b          = 0.0\n    e          = 0.0\n    f          = None\n    o          = None\n    t0         = None\n    t1         = None\n    t2         = None\n    t3         = None\n    t4         = None\n    t5         = None\n    t6         = None\n    t7         = None\n    t8         = None\n    t9         = None  Header values as attributes  Great for interactive use, with (ipython) tab-completion...  sac. tab   sac.a                 sac.kevnm             sac.nzsec\nsac.az                sac.kf                sac.nzyear\nsac.b                 sac.khole             sac.o\nsac.baz               sac.kinst             sac.odelta\nsac.byteorder         sac.knetwk            sac.read\nsac.cmpaz             sac.ko                sac.reftime\nsac.cmpinc            sac.kstnm             sac.scale\nsac.copy              sac.kt0               sac.stdp\nsac.data              sac.kt1               sac.stel\nsac.delta             sac.kt2               sac.stla\nsac.depmax            sac.kt3               sac.stlo\nsac.depmen            sac.kt4               sac.t0\nsac.depmin            sac.kt5               sac.t1\nsac.dist              sac.kt6               sac.t2\nsac.e                 sac.kt7               sac.t3\nsac.evdp              sac.kt8               sac.t4\nsac.evla              sac.kt9               sac.t5\nsac.evlo              sac.kuser0            sac.t6\nsac.f                 sac.kuser1            sac.t7\nsac.from_obspy_trace  sac.kuser2            sac.t8\nsac.gcarc             sac.lcalda            sac.t9\nsac.idep              sac.leven             sac.to_obspy_trace\nsac.ievreg            sac.lh                sac.unused23\nsac.ievtyp            sac.listhdr           sac.user0\nsac.iftype            sac.lovrok            sac.user1\nsac.iinst             sac.lpspol            sac.user2\nsac.imagsrc           sac.mag               sac.user3\nsac.imagtyp           sac.nevid             sac.user4\nsac.internal0         sac.norid             sac.user5\nsac.iqual             sac.npts              sac.user6\nsac.istreg            sac.nvhdr             sac.user7\nsac.isynth            sac.nwfid             sac.user8\nsac.iztype            sac.nzhour            sac.user9\nsac.ka                sac.nzjday            sac.validate\nsac.kcmpnm            sac.nzmin             sac.write\nsac.kdatrd            sac.nzmsec  ...and documentation!  sac.iztype?  Type:        property\nString form:  property object at 0x106404940 \nDocstring:\nI    Reference time equivalence:\n* IUNKN (5): Unknown\n* IB (9): Begin time\n* IDAY (10): Midnight of reference GMT day\n* IO (11): Event origin time\n* IA (12): First arrival time\n* ITn (13-22): User defined time pick n, n=0,9  Convert to/from ObsPy Traces  from obspy import read\ntr = read()[0]\nprint tr.stats           network: BW\n         station: RJOB\n        location: \n         channel: EHZ\n       starttime: 2009-08-24T00:20:03.000000Z\n         endtime: 2009-08-24T00:20:32.990000Z\n   sampling_rate: 100.0\n           delta: 0.01\n            npts: 3000\n           calib: 1.0\n    back_azimuth: 100.0\n     inclination: 30.0  sac = SACTrace.from_obspy_trace(tr)\nprint sac  Reference Time = 08/24/2009 (236) 00:20:03.000000\n    iztype IB: begin time\nb          = 0.0\ncmpaz      = 0.0\ncmpinc     = 0.0\ndelta      = 0.00999999977648\ndepmax     = 1293.77099609\ndepmen     = -4.49556303024\ndepmin     = -1515.81311035\ne          = 29.9899993297\niftype     = itime\ninternal0  = 2.0\niztype     = ib\nkcmpnm     = EHZ\nknetwk     = BW\nkstnm      = RJOB\nlcalda     = False\nleven      = True\nlovrok     = True\nlpspol     = True\nnpts       = 3000\nnvhdr      = 6\nnzhour     = 0\nnzjday     = 236\nnzmin      = 20\nnzmsec     = 0\nnzsec      = 3\nnzyear     = 2009\nscale      = 1.0  tr2 = sac.to_obspy_trace()\nprint tr2.stats           network: BW\n         station: RJOB\n        location:\n         channel: EHZ\n       starttime: 2009-08-24T00:20:03.000000Z\n         endtime: 2009-08-24T00:20:32.990000Z\n   sampling_rate: 100.0\n           delta: 0.01\n            npts: 3000\n           calib: 1.0\n             sac: AttribDict({'cmpaz': 0.0, 'nzyear': 2009, 'nzjday': 236,\n             'iztype': 9, 'evla': 0.0, 'nzhour': 0, 'lcalda': 0, 'evlo': 0.0,\n             'scale': 1.0, 'nvhdr': 6, 'depmin': -1515.8131, 'kcmpnm': 'EHZ',\n             'nzsec': 3, 'internal0': 2.0, 'depmen': -4.495563, 'cmpinc': 0.0,\n             'depmax': 1293.771, 'iftype': 1, 'delta': 0.0099999998, 'nzmsec':\n             0, 'lpspol': 1, 'b': 0.0, 'e': 29.99, 'leven': 1, 'kstnm': 'RJOB',\n             'nzmin': 20, 'lovrok': 1, 'npts': 3000, 'knetwk': 'BW'})", 
            "title": "Usage examples"
        }, 
        {
            "location": "/package/index.html", 
            "text": "Package Organization\n\n\npysac.header\n\n\nSAC header specification, including documentation.\n\n\nHeader names, order, and types, nulls, as well as allowed enumerated values, are\nspecified here.  Header name strings, and their array order are contained in\nseparate float, int, and string tuples.  Enumerated values, and their allowed\nstring and integer values, are in dictionaries.  Header value documentation is\nin a dictionary, \nDOC\n, for reuse throughout the package.\n\n\npysac.util\n\n\nPySAC helper functions and data.  Contains functions to validate and convert\nenumerated values, byteorder consistency checking, and SAC reference time\nreading.\n\n\nTwo of the most important functions in this module are \nsac_to_obspy_header\n\nand \nobspy_to_sac_header\n.  These contain the conversion routines between SAC\nheader dictionaries and ObsPy header dictionaries.  \nThese functions control\nthe way ObsPy reads and writes SAC files,\n which was one of the main\nmotivations for authoring this package.\n\n\npysac.arrayio\n\n\nLow-level array interface to the SAC file format.\n\n\nFunctions in this module work directly with numpy arrays that mirror the SAC\nformat, and comprise much of the machinery that underlies the \nSACTrace\n class.\nThe 'primitives' in this module are the float, int, and string header arrays,\nthe float data array, and a header dictionary. Convenience functions are\nprovided to convert between header arrays and more user-friendly dictionaries.\n\n\nThese read/write routines are very literal; there is almost no value or type\nchecking, except for byteorder and header/data array length.  File- and array-\nbased checking routines are provided for additional checks where desired.\n\n\nReading and writing are done with \nread_sac\n and \nwrite_sac\n for binary SAC\nfiles, and \nread_sac_ascii\n and \nwrite_sac_ascii\n for alphanumeric files.\nConversions between header dictionaries and the three SAC header arrays are done\nwith the \nheader_arrays_to_dict\n and \ndict_to_header_arrays\n functions.\nValidation of header values and data is managed by \nvalidate_sac_content\n,\nwhich can currently do six different tests.\n\n\npysac.sactrace\n\n\nContains the \nSACTrace\n class, which is the main user-facing interface to the\nSAC file format.\n\n\nThe \nSACTrace\n object maintains consistency between SAC headers and manages\nheader values in a user-friendly way. This includes some value-checking, native\nPython logicals and nulls instead of SAC's header-dependent logical/null\nrepresentation.\n\n\nReading and writing SAC files\n\n\nPySAC can read and write evenly-spaced time-series files.  It supports big or\nlittle-endian binary files, or alphanumeric/ASCII files.\n\n\n# read from a binary file\nsac = SACTrace.read(filename)\n\n# read header only\nsac = SACTrace.read(filename, headonly=True)\n\n# write header-only, file must exist\nsac.write(filename, headonly=True)\n\n# read from an ASCII file\nsac = SACTrace.read(filename, ascii=True)\n\n# write a binary SAC file for a Sun machine\nsac.write(filename, byteorder='big')\n\n\n\n\nHeaders\n\n\nIn the \nSACTrace\n class, SAC headers are implemented as properties, with\nappropriate \ngetters\n and \nsetters\n.  The getters/setters translate user-facing\nnative Python values like \nTrue\n, \nFalse\n, and \nNone\n to the appropriate SAC\nheader values, like \n1\n, \n0\n, \n-12345\n, \n'-12345   '\n, etc.  \n\n\nHeader values that depend on the SAC \n.data\n vector are calculated on-the-fly,\nand fall back to the stored header value.\n\n\nA convenient read-only dictionary of non-null, raw SAC header values is\navailable as \nSACTrace._header\n.  Formatted non-null headers are viewable using\n\nprint(sac)\n or the \n.lh()\n or \nlisthdr()\n methods.  Relative time headers and\npicks are viewable with \nlh('picks')\n.\n\n\nReference time and relative time header handling\n\n\nThe SAC reference time is built from \"nz...\" time fields in the header, and it\nis available as the attribute \n.reftime\n, an ObsPy \nUTCDateTime\n instance.\n\nreftime\n can be modified in two ways: by resetting it with a new absolute\n\nUTCDateTime\n instance, or by adding/subtracting seconds from it.  \nModifying\nthe \nreftime\n will also modify all relative time headers such that they are\nstill correct in an absolute sense\n.  This includes\n\na\n, \nb\n, \ne\n, \nf\n, \no\n, and \nt1\n-\nt9\n.  This means that adjusting the\nreference time does not invalidate the origin time, the first sample time, or\nany picks!\n\n\nHere, we build a 100-second \nSACTrace\n that starts at Y2K.\n\n\nsac = SACTrace(nzyear=2000, nzjday=1, nzhour=0, nzmin=0, nzsec=0, nzmsec=0,\n               t1=23.5, data=numpy.arange(101))\n\nsac.reftime\nsac.b, sac.e, sac.t1\n\n\n\n\n2000-01-01T00:00:00.000000Z\n(0.0, 100.0, 23.5)\n\n\n\n\nMove reference time by relative seconds, relative time headers are preserved.\n\n\nsac.reftime -= 2.5\nsac.b, sac.e, sac.t1\n\n\n\n\n(2.5, 102.5, 26.0)\n\n\n\n\nSet reference time to new absolute time, two minutes later.  Relative time\n headers are preserved.\n\n\nsac.reftime = UTCDateTime(2000, 1, 1, 0, 2, 0, 0)\nsac.b, sac.e\n\n\n\n\n(-120.0, -20.0, -96.5)", 
            "title": "Package"
        }, 
        {
            "location": "/package/index.html#package-organization", 
            "text": "", 
            "title": "Package Organization"
        }, 
        {
            "location": "/package/index.html#pysacheader", 
            "text": "SAC header specification, including documentation.  Header names, order, and types, nulls, as well as allowed enumerated values, are\nspecified here.  Header name strings, and their array order are contained in\nseparate float, int, and string tuples.  Enumerated values, and their allowed\nstring and integer values, are in dictionaries.  Header value documentation is\nin a dictionary,  DOC , for reuse throughout the package.", 
            "title": "pysac.header"
        }, 
        {
            "location": "/package/index.html#pysacutil", 
            "text": "PySAC helper functions and data.  Contains functions to validate and convert\nenumerated values, byteorder consistency checking, and SAC reference time\nreading.  Two of the most important functions in this module are  sac_to_obspy_header \nand  obspy_to_sac_header .  These contain the conversion routines between SAC\nheader dictionaries and ObsPy header dictionaries.   These functions control\nthe way ObsPy reads and writes SAC files,  which was one of the main\nmotivations for authoring this package.", 
            "title": "pysac.util"
        }, 
        {
            "location": "/package/index.html#pysacarrayio", 
            "text": "Low-level array interface to the SAC file format.  Functions in this module work directly with numpy arrays that mirror the SAC\nformat, and comprise much of the machinery that underlies the  SACTrace  class.\nThe 'primitives' in this module are the float, int, and string header arrays,\nthe float data array, and a header dictionary. Convenience functions are\nprovided to convert between header arrays and more user-friendly dictionaries.  These read/write routines are very literal; there is almost no value or type\nchecking, except for byteorder and header/data array length.  File- and array-\nbased checking routines are provided for additional checks where desired.  Reading and writing are done with  read_sac  and  write_sac  for binary SAC\nfiles, and  read_sac_ascii  and  write_sac_ascii  for alphanumeric files.\nConversions between header dictionaries and the three SAC header arrays are done\nwith the  header_arrays_to_dict  and  dict_to_header_arrays  functions.\nValidation of header values and data is managed by  validate_sac_content ,\nwhich can currently do six different tests.", 
            "title": "pysac.arrayio"
        }, 
        {
            "location": "/package/index.html#pysacsactrace", 
            "text": "Contains the  SACTrace  class, which is the main user-facing interface to the\nSAC file format.  The  SACTrace  object maintains consistency between SAC headers and manages\nheader values in a user-friendly way. This includes some value-checking, native\nPython logicals and nulls instead of SAC's header-dependent logical/null\nrepresentation.  Reading and writing SAC files  PySAC can read and write evenly-spaced time-series files.  It supports big or\nlittle-endian binary files, or alphanumeric/ASCII files.  # read from a binary file\nsac = SACTrace.read(filename)\n\n# read header only\nsac = SACTrace.read(filename, headonly=True)\n\n# write header-only, file must exist\nsac.write(filename, headonly=True)\n\n# read from an ASCII file\nsac = SACTrace.read(filename, ascii=True)\n\n# write a binary SAC file for a Sun machine\nsac.write(filename, byteorder='big')  Headers  In the  SACTrace  class, SAC headers are implemented as properties, with\nappropriate  getters  and  setters .  The getters/setters translate user-facing\nnative Python values like  True ,  False , and  None  to the appropriate SAC\nheader values, like  1 ,  0 ,  -12345 ,  '-12345   ' , etc.    Header values that depend on the SAC  .data  vector are calculated on-the-fly,\nand fall back to the stored header value.  A convenient read-only dictionary of non-null, raw SAC header values is\navailable as  SACTrace._header .  Formatted non-null headers are viewable using print(sac)  or the  .lh()  or  listhdr()  methods.  Relative time headers and\npicks are viewable with  lh('picks') .  Reference time and relative time header handling  The SAC reference time is built from \"nz...\" time fields in the header, and it\nis available as the attribute  .reftime , an ObsPy  UTCDateTime  instance. reftime  can be modified in two ways: by resetting it with a new absolute UTCDateTime  instance, or by adding/subtracting seconds from it.   Modifying\nthe  reftime  will also modify all relative time headers such that they are\nstill correct in an absolute sense .  This includes a ,  b ,  e ,  f ,  o , and  t1 - t9 .  This means that adjusting the\nreference time does not invalidate the origin time, the first sample time, or\nany picks!  Here, we build a 100-second  SACTrace  that starts at Y2K.  sac = SACTrace(nzyear=2000, nzjday=1, nzhour=0, nzmin=0, nzsec=0, nzmsec=0,\n               t1=23.5, data=numpy.arange(101))\n\nsac.reftime\nsac.b, sac.e, sac.t1  2000-01-01T00:00:00.000000Z\n(0.0, 100.0, 23.5)  Move reference time by relative seconds, relative time headers are preserved.  sac.reftime -= 2.5\nsac.b, sac.e, sac.t1  (2.5, 102.5, 26.0)  Set reference time to new absolute time, two minutes later.  Relative time\n headers are preserved.  sac.reftime = UTCDateTime(2000, 1, 1, 0, 2, 0, 0)\nsac.b, sac.e  (-120.0, -20.0, -96.5)", 
            "title": "pysac.sactrace"
        }, 
        {
            "location": "/license/index.html", 
            "text": "License\n\n\nCopyright 2015. Los Alamos National Security, LLC for pysac LA-CC-15-051. This\nmaterial was produced under U.S. Government contract DE-AC52-06NA25396 for Los\nAlamos National Laboratory (LANL), which is operated by Los Alamos National\nSecurity, LLC for the U.S. Department of Energy. The U.S. Government has rights\nto use, reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR\nLOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR\nASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is modified to\nproduce derivative works, such modified software should be clearly marked, so\nas not to confuse it with the version available from LANL.\n\n\nAdditionally, this library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public License, v. 3., as\npublished by the Free Software Foundation. Accordingly, this library is\ndistributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\nwithout even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.", 
            "title": "License"
        }, 
        {
            "location": "/license/index.html#license", 
            "text": "Copyright 2015. Los Alamos National Security, LLC for pysac LA-CC-15-051. This\nmaterial was produced under U.S. Government contract DE-AC52-06NA25396 for Los\nAlamos National Laboratory (LANL), which is operated by Los Alamos National\nSecurity, LLC for the U.S. Department of Energy. The U.S. Government has rights\nto use, reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR\nLOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR\nASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is modified to\nproduce derivative works, such modified software should be clearly marked, so\nas not to confuse it with the version available from LANL.  Additionally, this library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public License, v. 3., as\npublished by the Free Software Foundation. Accordingly, this library is\ndistributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\nwithout even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.", 
            "title": "License"
        }, 
        {
            "location": "/obspy/index.html", 
            "text": "Relationship to ObsPy\n\n\nPySAC is largely re-written from the\n\nobspy.io.sac\n module,\nwith the intention of eventually replacing it.\n\n\nWhy a re-write?\n\n\nThe sacio module underlying ObsPy's SAC handling was sometimes hard to follow,\nas it has a long inheritance, which made it hard to track down issues or make\nfixes. This re-write attempts to make the SAC plugin easier to understand and\nmaintain, as well as offer some potential improvements.\n\n\nImprove maintainability.\n\n\nI've split out the header specification (header.py), the low-level array-based\nSAC file I/O (arrayio.py), and the object-oriented interface (sactrace.py),\nwhereas it was previously all within one sacio.py module. I hope that the flow\nof how each plugs into the other is clear, so that bug tracking is\nstraight-forward, and that hacking on one aspect of SAC handling is not\ncluttered/distracted by another.\n\n\nExpand support for round-trip SAC file processing\n\n\nThis rewrite attempts to improve support for a common work flow: read one or\nmore SAC files into ObsPy, do some processing, then (over)write them back as\nSAC files that look mostly like the originals. Previously, ObsPy Traces written\nto SAC files wrote only files based on the first sample time (iztype 9/'ib').\nIn \nutil.py:obspy_to_sac_header\n of this module, if an old tr.stats.sac SAC\nheader is found, the iztype and reference \"nz\" times are used and kept, and the\n\"b\" and \"e\" times of the Trace being written are adjusted according to this\nreference time. This preserves the absolute reference of any relative time\nheaders, like t0-t9, carried from the old SAC header into the new file. This\ncan only be done if SAC to Trace conversion preserves these \"nz\" time headers,\nwhich is possible with the current \ndebug_headers=True\n flag.", 
            "title": "ObsPy"
        }, 
        {
            "location": "/obspy/index.html#relationship-to-obspy", 
            "text": "PySAC is largely re-written from the obspy.io.sac  module,\nwith the intention of eventually replacing it.", 
            "title": "Relationship to ObsPy"
        }, 
        {
            "location": "/obspy/index.html#why-a-re-write", 
            "text": "The sacio module underlying ObsPy's SAC handling was sometimes hard to follow,\nas it has a long inheritance, which made it hard to track down issues or make\nfixes. This re-write attempts to make the SAC plugin easier to understand and\nmaintain, as well as offer some potential improvements.", 
            "title": "Why a re-write?"
        }, 
        {
            "location": "/obspy/index.html#improve-maintainability", 
            "text": "I've split out the header specification (header.py), the low-level array-based\nSAC file I/O (arrayio.py), and the object-oriented interface (sactrace.py),\nwhereas it was previously all within one sacio.py module. I hope that the flow\nof how each plugs into the other is clear, so that bug tracking is\nstraight-forward, and that hacking on one aspect of SAC handling is not\ncluttered/distracted by another.", 
            "title": "Improve maintainability."
        }, 
        {
            "location": "/obspy/index.html#expand-support-for-round-trip-sac-file-processing", 
            "text": "This rewrite attempts to improve support for a common work flow: read one or\nmore SAC files into ObsPy, do some processing, then (over)write them back as\nSAC files that look mostly like the originals. Previously, ObsPy Traces written\nto SAC files wrote only files based on the first sample time (iztype 9/'ib').\nIn  util.py:obspy_to_sac_header  of this module, if an old tr.stats.sac SAC\nheader is found, the iztype and reference \"nz\" times are used and kept, and the\n\"b\" and \"e\" times of the Trace being written are adjusted according to this\nreference time. This preserves the absolute reference of any relative time\nheaders, like t0-t9, carried from the old SAC header into the new file. This\ncan only be done if SAC to Trace conversion preserves these \"nz\" time headers,\nwhich is possible with the current  debug_headers=True  flag.", 
            "title": "Expand support for round-trip SAC file processing"
        }
    ]
}